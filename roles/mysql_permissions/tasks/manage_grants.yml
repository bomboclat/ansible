---

- name: "Define the grant creation"
  set_fact:
    mysql_grant_create: >-
      GRANT {{ mysql_grants[mysql_permission.grant] }}
      ON {{ mysql_database.name }}.{{ mysql_permission.on_tables }}
      TO '{{ mysql_permission.user }}'@'{{ mysql_permission.from }}'
    mysql_grant_create_unquote: >-
      GRANT {{ mysql_grants[mysql_permission.grant] }}
      ON {{ mysql_database.name }}.{{ mysql_permission.on_tables }}
      TO {{ mysql_permission.user }}@{{ mysql_permission.from }}

- name: "Define the grant revocation"
  set_fact:
    mysql_grant_revoke: >-
      REVOKE {{ mysql_grants[mysql_permission.grant] }}
      ON {{ mysql_database.name }}.{{ mysql_permission.on_tables }}
      FROM '{{ mysql_permission.user }}'@'{{ mysql_permission.from }}'

- name: "Define the grant show statement"
  set_fact:
    mysql_grant_show: >-
      SHOW GRANTS
      FOR '{{ mysql_permission.user }}'@'{{ mysql_permission.from }}'

- name: "Define mysql_database_name for invalid grants query (when name is not *)"
  set_fact:
    mysql_database_name: "{{ mysql_database.name }}"
  when:
   - mysql_database.name != '*'

- name: "Define mysql_database_name for invalid grants query (when name is *)"
  set_fact:
    mysql_database_name: '\*'
  when:
   - mysql_database.name == '*'

- name: "Define mysql_permission_on_tables for invalid grants query (when on_tables is not *)"
  set_fact:
    mysql_permission_on_tables: "{{ mysql_database.name }}"
  when:
   - mysql_permission.on_tables != '*'

- name: "Define mysql_database_name for invalid grants query (when on_tables is *)"
  set_fact:
    mysql_permission_on_tables: '\*'
  when:
   - mysql_permission.on_tables == '*'

- name: "Get invalid grants on {{ mysql_database.name }}.{{ mysql_permission.on_tables }} for user {{ mysql_permission.user }}@{{ mysql_permission.from }}"
  shell: |
    set -o pipefail
    {{ mysql_command }} "{{ mysql_grant_show }}" | \
    sed 's/`//g' | grep -v 'GRANT USAGE ON *.*' | \
    grep 'ON {{ mysql_database_name }}.{{ mysql_permission_on_tables }}' | \
    grep -v "{{ mysql_grant_create }}" | \
    grep -v "{{ mysql_grant_create_unquote }}"
  args:
    executable: /bin/bash
  register: mysql_invalid_grants
  failed_when: false
  changed_when: false

- name: "Invalid grants list for user {{ mysql_permission.user }}"
  debug:
    msg: "{{ mysql_invalid_grants.stdout }}"
  when:
    - mysql_invalid_grants.stdout
    - just_verify|bool

- name: "Create REVOKE commands for user {{ mysql_permission.user }}@{{ mysql_permission.from }} on {{ mysql_database.name }}.{{ mysql_permission.on_tables }}"
  shell: |
    set -o pipefail
    echo "{{ mysql_invalid_grants.stdout }}" | sed "s/^GRANT/REVOKE/" | sed "s/ TO / FROM /" |
      sed "s/ IDENTIFIED BY PASSWORD.*//" |
      sed -E "s/FROM\s+(.*)@(.*)/FROM '\\1'@'\\2'/"
  args:
    executable: /bin/bash
  register:
    mysql_invalid_grants_revoke
  when:
    mysql_invalid_grants.stdout
  changed_when: false

- name: "Revoke invalid grants for user {{ mysql_permission.user }}@{{ mysql_permission.from }} on {{ mysql_database.name }}.{{ mysql_permission.on_tables }}"
  command: "{{ mysql_command }} \"{{ mysql_invalid_grants_revoke.stdout }}\""
  when:
    - mysql_invalid_grants.stdout
    - not just_verify|bool

- name: "Get specific grant {{ mysql_grants[mysql_permission.grant] }} for user {{ mysql_permission.user }}@{{ mysql_permission.from }}"
  shell: |
    set -o pipefail
    {{ mysql_command }} "{{ mysql_grant_show }}" | \
    sed 's/`//g' | grep -E "({{ mysql_grant_create }}|{{ mysql_grant_create_unquote }})"
  args:
    executable: /bin/bash
  register: mysql_grant_exists
  failed_when: false
  changed_when: false

- name: "Grants for user {{ mysql_permission.user }}"
  debug:
    msg: "{{ mysql_grant_exists.stdout }}"
  when:
    - just_verify|bool

- name: "Set mysql command fact for specific user {{ mysql_permission.user }}"
  set_fact:
    mysql_command_user: >-
      mysql --host={{ ansible_fqdn }}
      --user={{ mysql_permission.user }}
      --password={{ mysql_passwords[mysql_permission.user].password }}
      --skip-column-names
      --batch
      -e
  when:
    - mysql_passwords[mysql_permission.user].force|bool

- name: "Check if specific user {{ mysql_permission.user }} can login"
  command: "{{ mysql_command_user }} 'SHOW DATABASES'"
  register: mysql_command_user_login
  failed_when: false
  changed_when: false
  when:
    - mysql_passwords[mysql_permission.user].force|bool

- name: "When not forcing password set return code for user {{ mysql_permission.user }} login to 0"
  set_fact:
    mysql_command_user_login: { 'rc': 0 }
  when:
    - not mysql_passwords[mysql_permission.user].force|bool

- name: "Grant user {{ mysql_permission.user }}@{{ mysql_permission.from }} permission on {{ mysql_database.name }}.{{ mysql_permission.on_tables }}"
  command: "{{ mysql_command }} \"{{ mysql_grant_create }} IDENTIFIED BY '{{ mysql_passwords[mysql_permission.user].password }}';\""
  when:
    - mysql_grant_exists.rc != 0 or mysql_command_user_login.rc != 0
    - not just_verify|bool
    - not revoke_grants|bool

- name: "Revoke permission on {{ mysql_database.name }}.{{ mysql_permission.on_tables }} to {{ mysql_permission.user }}@{{ mysql_permission.from }}"
  command: "{{ mysql_command }} \"{{ mysql_grant_revoke }}\""
  when:
    - mysql_grant_exists.rc == 0
    - not just_verify|bool
    - revoke_grants|bool
